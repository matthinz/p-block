import { BasicValidator } from "./basic";
import { NumberValidator } from "./number";
import {
  NormalizationFunction,
  TypeValidationFunction,
  ValidationFunction,
  ValidatorOptions,
} from "./types";

export class StringValidator extends BasicValidator<any, string> {
  constructor(
    parent: TypeValidationFunction<any, string> | StringValidator | undefined,
    normalizers:
      | NormalizationFunction<string>
      | NormalizationFunction<string>[],
    validators: ValidationFunction<string> | ValidationFunction<string>[],
    options?: ValidatorOptions
  ) {
    super(parent ?? "string", normalizers, validators, options);
  }

  lowerCased(): StringValidator {
    return new StringValidator(
      this,
      (str) => str.toLowerCase(),
      [],
      this.options
    );
  }

  /**
   * @param regex
   * @param errorCode
   * @param errorMessage
   * @returns A new StringValidator configured to check inputs against the given regular expression.
   */
  matches(
    regex: RegExp,
    errorCode?: string,
    errorMessage?: string
  ): StringValidator {
    return this.passes(
      (input) => regex.test(input),
      errorCode ?? "matches",
      errorMessage ?? `input must match regular expression ${regex}`
    );
  }

  /**
   * @param max Maximum length (inclusive) to be considered valid input.
   * @param errorCode Code for any errors generated by validation.
   * @param errorMessage Message for any errors generated by validation.
   * @returns A new validator that requires input to be at most `max` characters long.
   */
  maxLength(max: number, errorCode?: string, errorMessage?: string) {
    return this.passes(
      (input) => input.length <= max,
      errorCode ?? "maxLength",
      errorMessage ??
        `input length must be less than or equal to ${max} character(s)`
    );
  }

  /**
   * @param max Maximum length (inclusive) to be considered valid input.
   * @param errorCode Code for any errors generated by validation.
   * @param errorMessage Message for any errors generated by validation.
   * @returns A new validator that requires input to be at most `max` characters long.
   */
  minLength(min: number, errorCode?: string, errorMessage?: string) {
    return this.passes(
      (input) => input.length >= min,
      errorCode ?? "minLength",
      errorMessage ??
        `input length must be greater than or equal to ${min} character(s)`
    );
  }

  /**
   *
   * @param errorCode
   * @param errorMessage
   * @returns A StringValidator that will check that a string is not empty.
   */
  notEmpty(errorCode?: string, errorMessage?: string) {
    return this.minLength(
      1,
      errorCode ?? "notEmpty",
      errorMessage ?? "input cannot be an empty string"
    );
  }

  /**
   * @returns A NumberValidator used to validate the number parsed out of the input.
   */
  parsedAsFloat(): NumberValidator {
    throw new Error();
  }

  /**
   * @param base Base used when parsing.
   * @returns A NumberValidator used to validate the number parsed out of the input.
   */
  parsedAsInteger(base: number = 10): NumberValidator {
    throw new Error();
  }

  /**
   * @param check
   * @param errorCode
   * @param errorMessage
   * @returns A new StringValidator configured to perform an additional check.
   */
  passes(
    validator: (input: string) => boolean,
    errorCode?: string,
    errorMessage?: string
  ): StringValidator {
    return new StringValidator(this, [], validator, {
      ...this.options,
      errorCode: errorCode ?? "invalid",
      errorMessage: errorMessage ?? "input was invalid",
    });
  }

  /**
   * @returns A StringValidator that removes leading and trailing whitespace during the normalization phase.
   */
  trimmed(): StringValidator {
    return new StringValidator(
      this,
      (input: string) => input.trim(),
      [],
      this.options
    );
  }

  upperCased(): StringValidator {
    return new StringValidator(
      this,
      (str) => str.toUpperCase(),
      [],
      this.options
    );
  }
}
